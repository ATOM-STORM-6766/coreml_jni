apply plugin: 'maven-publish'

def nativeName = wpilibTools.platformMapper.currentPlatform.platformName;
if (nativeName.equals("macx64") || nativeName.equals("macarm64")) {
    nativeName = "osxuniversal";
}

def publishType = project.findProperty("PublishType") ?: "";

def artifactGroupId = 'org.atomstorm'
def baseArtifactId = "coreml_jni" + publishType

println("Building with JNI publish type: " + publishType);

task nativeLibraryJar(type: Jar, dependsOn: copyNativeLibrary) {
    archiveClassifier = nativeName + publishType
    from outputsFolder
}
build.dependsOn nativeLibraryJar

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY") ?: "ATOM-STORM-6766/coreml_jni"}")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: System.getenv("GITHUB_USERNAME") ?: "username"
                password = System.getenv("GITHUB_TOKEN") ?: System.getenv("GITHUB_PASSWORD") ?: "password"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = artifactGroupId
            artifactId = "${baseArtifactId}-java"
            version = pubVersion;// + "-" + nativeName;

            from components.java
        }
        mavenJNI(MavenPublication) {
            groupId = artifactGroupId
            artifactId = "${baseArtifactId}-jni"
            version = pubVersion;

            artifact nativeLibraryJar
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    doFirst {
        println("Publishing coreml-jni to " + repository.url)
    }
}

